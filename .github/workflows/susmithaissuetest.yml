name: susmitha  Issue

on:
  workflow_dispatch:
    inputs:
      # Input for the Xcode app name, default to 16.3 as in the original issue
      xcode_app_name:
        description: 'Xcode app name to select (e.g., Xcode_16.3.app)'
        required: true
        default: 'Xcode_16.3.app'
      # Optional: Input for the full developer directory path if needed, overrides app_name
      xcode_developer_dir:
        description: 'Full path to Xcode.app/Contents/Developer (optional, overrides app_app_name)'
        required: false
        default: ''

jobs:
  check_xcode_selection:
    runs-on: macos-15-arm # CRITICAL: Specifying the runner from the issue

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: List Installed Xcode Versions on Runner
        run: |
          echo "=========================================="
          echo "DEBUG: LISTING ALL XCODE APPS IN /Applications"
          echo "=========================================="
          ls -la /Applications | grep "Xcode" || echo "No Xcode apps found or permission issue"
          echo "=========================================="

      - name: Set Target Xcode Path Variable
        id: set_xcode_path
        run: |
          if [ -n "${{ github.event.inputs.xcode_developer_dir }}" ]; then
            echo "XCODE_DEV_PATH=${{ github.event.inputs.xcode_developer_dir }}" >> $GITHUB_ENV
          else
            echo "XCODE_DEV_PATH=/Applications/${{ github.event.inputs.xcode_app_name }}/Contents/Developer" >> $GITHUB_ENV
          fi
          echo "Target Xcode Developer Path set to: $XCODE_DEV_PATH"

      - name: Debug Xcode BEFORE selection attempt (Initial State)
        run: |
          echo "=========================================="
          echo "DEBUG: XCODE STATE BEFORE ANY SELECTION ATTEMPTS"
          echo "=========================================="
          echo "DEVELOPER_DIR (Environment Variable): '$DEVELOPER_DIR'" # Use single quotes to see if it's empty
          echo "xcode-select -p Output:"
          xcode-select -p || echo "xcode-select path not set or command failed"
          echo "xcrun --find xcodebuild Output:"
          xcrun --find xcodebuild || echo "xcodebuild not found by xcrun or command failed"
          echo "xcodebuild -version Output:"
          xcodebuild -version || echo "xcodebuild -version command failed"
          echo "=========================================="

      - name: Attempt to select Xcode (Direct 'sudo xcode-select -s')
        run: |
          echo "Attempting direct 'sudo xcode-select -s $XCODE_DEV_PATH'"
          # Use '|| true' to allow workflow to continue and print debug info even if this fails
          sudo xcode-select -s "$XCODE_DEV_PATH" || true
          echo "Direct 'xcode-select -s' command executed. Check subsequent debug for effect."

      - name: Debug Xcode AFTER Direct Selection
        run: |
          echo "=========================================="
          echo "DEBUG: XCODE STATE AFTER DIRECT 'xcode-select -s'"
          echo "=========================================="
          echo "DEVELOPER_DIR (Environment Variable): '$DEVELOPER_DIR'"
          echo "xcode-select -p Output:"
          xcode-select -p || echo "xcode-select path not set or command failed"
          echo "xcrun --find xcodebuild Output:"
          xcrun --find xcodebuild || echo "xcodebuild not found by xcrun or command failed"
          echo "xcodebuild -version Output:"
          xcodebuild -version || echo "xcodebuild -version command failed"
          echo "=========================================="

      # --- Fastlane related steps (to mimic original report) ---
      - name: Install Ruby and Bundler for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0' # Use a specific version known to be on macos-15-arm runners
          bundler-cache: false # We'll install gems manually in this temporary setup
        working-directory: ${{ github.workspace }} # Run from repo root

      - name: Install Fastlane Gem
        run: gem install fastlane -NV
        working-directory: ${{ github.workspace }} # Run from repo root

      - name: Create Temporary Fastfile for Xcode Selection
        run: |
          # Create a temporary fastlane directory and Fastfile at the repo root
          mkdir -p fastlane_xcode_test
          cat > fastlane_xcode_test/Fastfile <<EOF
          default_platform(:ios)

          lane :setup_xcode_version do |options|
            xcode_select(options[:xcodeDeveloperDir])
          end
          EOF
        working-directory: ${{ github.workspace }} # Create in repo root

      - name: Run Fastlane Xcode Selection Lane
        run: |
          echo "Attempting selection via Fastlane lane: setup_xcode_version"
          # Execute Fastlane from the temporary directory containing its Fastfile
          bundle exec fastlane setup_xcode_version xcodeDeveloperDir:"$XCODE_DEV_PATH" || true
        working-directory: ${{ github.workspace }}/fastlane_xcode_test # Run from temporary fastlane dir

      - name: Debug Xcode AFTER Fastlane Selection
        run: |
          echo "=========================================="
          echo "DEBUG: XCODE STATE AFTER FASTLANE SELECTION"
          echo "=========================================="
          echo "DEVELOPER_DIR (Environment Variable): '$DEVELOPER_DIR'"
          echo "xcode-select -p Output:"
          xcode-select -p || echo "xcode-select path not set or command failed"
          echo "xcrun --find xcodebuild Output:"
          xcrun --find xcodebuild || echo "xcodebuild not found by xcrun or command failed"
          echo "xcodebuild -version Output:"
          xcodebuild -version || echo "xcodebuild -version command failed"
          echo "=========================================="
