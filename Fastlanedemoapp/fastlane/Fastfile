default_platform(:ios)

platform :ios do
  before_all do |lane, _options|
    # Run CI setup for certain lanes
    if [:beta, :distribution_deploy_dev, :distribution_deploy_recette, :distribution_deploy_staging].include?(lane)
      setup_ci
    end

    # Install/update pods only if needed
    if !File.exist?("Pods/Manifest.lock") || File.mtime("Podfile") > File.mtime("Pods/Manifest.lock")
      UI.message("Installing/updating pods...")
      cocoapods(
        try_repo_update_on_error: true,
        podfile: "./Podfile"
      )
    else
      UI.message("Pods up to date, skipping installation")
    end
  end

  desc "Increment build number"
  lane :increment_version do
    build_number = ENV["BUILD_NUMBER"] || "1"
    increment_build_number(build_number: build_number)
  end

  desc "Prepare archive for App Store or TestFlight"
  lane :prepare_archive do
    increment_version
    version = ENV["APP_VERSION"] || get_version_number
    increment_version_number(version_number: version)
  end

  desc "Deploy Beta to TestFlight (test mode without Apple key)"
  lane :beta do
    UI.header("=== Beta lane started at #{Time.now} ===")

    prepare_archive

    # Skip API key and match for testing
    UI.message("Skipping Apple API key and match for CI/testing purposes")

    UI.header("=== Build phase started at #{Time.now} ===")
    build_app(
      scheme: "Fastlanedemoapp",
      export_method: "app-store",
      skip_profile_detection: true,
      skip_codesigning: true,    # important for dummy/test runs
      skip_archive: false
    )
    UI.success("=== Build phase completed ===")

    # Skip dSYM upload for testing
    dsym_path = Actions.lane_context[SharedValues::DSYM_OUTPUT_PATH] || "./App.dSYM.zip"
    if File.exist?(dsym_path)
      UI.message("dSYM exists at #{dsym_path}, but skipping upload in test mode")
    else
      UI.important("No dSYM found at #{dsym_path}")
    end

    # Skip TestFlight upload
    UI.header("=== Skipping upload phase in test mode ===")
    UI.success("=== Beta lane finished successfully (test mode) ===")
  end
end
