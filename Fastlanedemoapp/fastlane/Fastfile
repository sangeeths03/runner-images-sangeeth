default_platform(:ios)

platform :ios do
  desc "Increment build number from CI BUILD_NUMBER"
  lane :increment_version do
    buildNumber = ENV["BUILD_NUMBER"] || "1"
    increment_build_number(build_number: buildNumber)
  end

  desc "Prepare archive (version + build number)"
  lane :prepare_archive do
    increment_version
    version = ENV["APP_VERSION"] || get_version_number()
    increment_version_number(version_number: version)
  end

  desc "Deploy Beta for TestFlight - Safe repro (structure only)"
  lane :beta do
    UI.message("=== Beta lane started at #{Time.now} ===")

    # Step 1: bump version/build
    prepare_archive

    # Step 2: Simulated cert/keychain setup (user runs match)
    UI.message("=== Simulating match/api_key setup ===")
    key = { "key_id" => "FAKEKEYID", "issuer_id" => "FAKEISSUERID", "key_content" => "FAKECONTENT" }

    match(
      api_key: key,
      type: "appstore",
      app_identifier: "com.example.app"
    )

    # Step 3: Build (with signing enabled to match userâ€™s flow)
    UI.message("=== Build phase started at #{Time.now} ===")
    build_app(
      scheme: "Fastlanedemoapp",
      export_method: "app-store",
      skip_profile_detection: true,
      export_xcargs: "-parallelizeTargets",
      skip_archive: false,
      skip_codesigning: false
    )
    UI.message("=== Build phase completed at #{Time.now} ===")

    # Step 4: Simulated dSYM + Crashlytics upload
    UI.message("=== Simulating dSYM upload to Crashlytics ===")
    sh "echo 'Uploading dSYM to Crashlytics (simulated)' && sleep 5"

    # Step 5: Simulated TestFlight upload
    UI.message("=== Simulating TestFlight upload ===")
    sh "echo 'Uploading to TestFlight (simulated)' && sleep 10"

    UI.message("=== Beta lane finished at #{Time.now} ===")
  end
end
