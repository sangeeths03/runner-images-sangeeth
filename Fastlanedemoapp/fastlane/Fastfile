default_platform(:ios)

# -------------------------------
# Clean DerivedData helper
# -------------------------------
def clean_derived_data
  sh("rm -rf ~/Library/Developer/Xcode/DerivedData/*")
  UI.message("âœ… Cleaned DerivedData")
end

# -------------------------------
# Shared CI setup
# -------------------------------
def setup_ci_lane
  setup_ci
  # Only install/update pods if needed
  if !File.exist?("Pods/Manifest.lock") || File.mtime("Podfile") > File.mtime("Pods/Manifest.lock")
    UI.message("Installing/updating pods...")
    cocoapods(
      try_repo_update_on_error: true,
      podfile: "./Podfile"
    )
  else
    UI.message("Pods up to date, skipping installation")
  end
end

# -------------------------------
# iOS platform
# -------------------------------
platform :ios do
  before_all do |lane, _options|
    if [:beta, :distribution_deploy_dev, :distribution_deploy_recette, :distribution_deploy_staging].include?(lane)
      setup_ci_lane
    end
  end

  desc "Increment build number from BUILD_NUMBER env"
  lane :increment_version do
    build_number = ENV["BUILD_NUMBER"] || "1"
    increment_build_number(build_number: build_number)
  end

  desc "Prepare archive for App Store or TestFlight"
  lane :prepare_archive do
    clean_derived_data
    increment_version
    version = ENV["APP_VERSION"] || get_version_number
    increment_version_number(version_number: version)
  end

  desc "Deploy Beta for TestFlight (iOS)"
  lane :beta do
    UI.header("=== Beta lane started at #{Time.now} ===")
    prepare_archive

    UI.message("Skipping match/API key for CI/testing purposes")

    UI.header("=== Build phase started at #{Time.now} ===")
    build_app(
      scheme: "Fastlanedemoapp",           # <-- your scheme
      workspace: "./Fastlanedemoapp.xcworkspace",
      export_method: "app-store",
      skip_profile_detection: true,
      skip_codesigning: true,              # skip for public CI
      skip_archive: false,
      destination: "generic/platform=iOS"  # important: force iOS, not visionOS
    )
    UI.success("=== Build phase completed ===")

    # Skip dSYM upload for testing
    dsym_path = Actions.lane_context[SharedValues::DSYM_OUTPUT_PATH] || "./App.dSYM.zip"
    if File.exist?(dsym_path)
      UI.message("dSYM exists at #{dsym_path}, skipping upload in test mode")
    else
      UI.important("No dSYM found at #{dsym_path}")
    end

    UI.header("=== Skipping upload phase in test mode ===")
    UI.success("=== Beta lane finished successfully (iOS test mode) ===")
  end
end
