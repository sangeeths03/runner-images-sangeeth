default_platform(:ios)

# Dummy Apple key fetcher (for testing only, not valid for real uploads)
def get_apple_key
  app_store_connect_api_key(
    key_id: "DUMMY_KEY_ID_123",
    issuer_id: "DUMMY_ISSUER_ID_456",
    key_content: <<~KEY,
      -----BEGIN PRIVATE KEY-----
      FAKEKEYFAKEKEYFAKEKEYFAKEKEYFAKEKEYFAKEKEYFAKEKEYFAKEKEYFAKEKEY
      FAKEKEYFAKEKEYFAKEKEYFAKEKEYFAKEKEYFAKEKEYFAKEKEYFAKEKEYFAKEKEY
      -----END PRIVATE KEY-----
    KEY
    in_house: false
  )
end

platform :ios do
  before_all do |lane, _options|
    if [:beta, :distribution_deploy_dev, :distribution_deploy_recette, :distribution_deploy_staging].include?(lane)
      setup_ci
    end

    if !File.exist?("Pods/Manifest.lock") || File.mtime("Podfile") > File.mtime("Pods/Manifest.lock")
      UI.message("Installing/updating pods...")
      cocoapods(
        try_repo_update_on_error: true,
        podfile: "./Podfile"
      )
    else
      UI.message("Pods up to date, skipping installation")
    end
  end

  desc "Increment build number"
  lane :increment_version do
    build_number = ENV["BUILD_NUMBER"] || "1"
    increment_build_number(build_number: build_number)
  end

  desc "Prepare archive for App Store or TestFlight"
  lane :prepare_archive do
    increment_version
    version = ENV["APP_VERSION"] || get_version_number
    increment_version_number(version_number: version)
  end

  desc "Deploy Beta to TestFlight"
  lane :beta do
    UI.header("=== Beta lane started at #{Time.now} ===")

    prepare_archive

    key = get_apple_key

    match(
      api_key: key,
      type: "appstore",
      app_identifier: "com.bunle.app"
    )

    UI.header("=== Build phase started at #{Time.now} ===")
    build_app(
      scheme: "App",
      export_method: "app-store",
      skip_profile_detection: true,
      export_xcargs: "-parallelizeTargets",
      skip_archive: false,
      skip_codesigning: false
    )
    UI.success("=== Build phase completed ===")

    dsym_path = Actions.lane_context[SharedValues::DSYM_OUTPUT_PATH] || "./App.dSYM.zip"
    if File.exist?(dsym_path)
      upload_symbols_to_crashlytics(
        gsp_path: "./Assets/Configs/Firebase/Prod/GoogleService-Info.plist",
        dsym_path: dsym_path
      )
    else
      UI.important("No dSYM found at #{dsym_path}")
    end

    UI.header("=== Upload phase started at #{Time.now} ===")
    upload_to_testflight(
      notify_external_testers: false,
      app_identifier: "com.bunel.app",
      changelog: "Upload TestFlight",
      groups: ENV["DIFF_GROUP"] || "Team App",
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      beta_app_description: "Description of the app"
    )
    UI.success("=== Upload phase completed ===")
  end
end
